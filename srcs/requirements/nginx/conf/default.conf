server {
	listen 443 ssl;
	listen [::]:443 ssl;

	server_name aamajane.42.fr;

	ssl_protocols TLSv1.2 TLSv1.3;
	ssl_certificate /etc/nginx/ssl/nginx-selfsigned.crt;
	ssl_certificate_key /etc/nginx/ssl/nginx-selfsigned.key;

	root /var/www/html;
	index index.php index.nginx-debian.html;

	location / {
		try_files $uri $uri/ /index.php$is_args$args;
	}
}

####################################################################################################

# # The purpose of a server block is to specify the settings for a particular virtual server.
# server {

# 	# The "listen" directive is used to specify the IP address and port that Nginx should listen on.
# 	# In this case, it's listening on port 443 for SSL (Secure Socket Layer) encrypted traffic.
# 	# The "ssl" keyword is used to indicate that SSL encryption is required for this server.
# 	listen 443 ssl;
# 	listen [::]:443 ssl;

# 	# The "server_name" directive is used to specify the domain name that this server block should respond to.
# 	# When a request is received, Nginx will compare the request's host header to the server_name value.
# 	# If a match is found, the request will be served by this server block.
# 	server_name aamajane.42.fr;

# 	# The "ssl_certificate" and "ssl_certificate_key" directives are used to specify the locations of the SSL certificate and private key files, respectively.
# 	# The SSL certificate is used to establish an encrypted connection between the client and the server.
# 	# The private key is used to decrypt incoming traffic and encrypt outgoing traffic.
# 	ssl_certificate /etc/nginx/ssl/nginx.crt;
# 	ssl_certificate_key /etc/nginx/ssl/nginx.key;

# 	# The "ssl_protocols" directive is used to specify the SSL/TLS protocols that should be used for encryption.
# 	# In this case, only TLSv1.2 and TLSv1.3 are allowed.
# 	ssl_protocols TLSv1.2 TLSv1.3;

# 	# The "root" directive is used to specify the root directory for serving files.
# 	# When a request is received, Nginx will look for the requested file in this directory and serve it if found.
# 	root /var/www/html;

# 	# The "index" directive is used to specify the default index files that Nginx should look for in the root directory.
# 	# If a directory is requested and no index file is found, Nginx will look for the specified files in the order listed.
# 	index index.php index.nginx-debian.html;

# 	# Location blocks are used to specify different handling for different request URIs.
# 	# The purpose of this location block is to serve requests for the default URI ("/").
# 	location / {

# 		# The "try_files" directive is used to attempt to serve a request as a file.
# 		# If the requested file is not found, Nginx will try to serve the next listed file.
# 		# In this case, if the requested URI is not found, Nginx will try to serve the same URI with a trailing slash.
# 		# If that also fails, Nginx will serve the file "/index.php" with the request arguments appended.
# 		try_files $uri $uri/ /index.php$is_args$args;
# 	}

# 	# # The purpose of this location block is to serve PHP files.
# 	# location ~ \.php$ {

# 	# 	# The "fastcgi_split_path_info" directive is used to split the request URI into two variables: $fastcgi_script_name and $fastcgi_path_info.
# 	# 	# The $fastcgi_script_name variable will contain the name of the requested PHP file, and the $fastcgi_path_info variable will contain any additional information in the URI after the PHP file name.
# 	# 	# This is used for passing the request to a FastCGI server for processing.
# 	# 	fastcgi_split_path_info ^(.+\.php)(/.+)$;

# 	# 	# The "fastcgi_pass" directive is used to specify the FastCGI server that should handle the request.
# 	# 	# In this case, the FastCGI server is named "wordpress" and is running on port 9000.
# 	# 	fastcgi_pass wordpress:9000;

# 	# 	# The "fastcgi_index" directive is used to specify the default FastCGI script that should be run when a directory is requested.
# 	# 	# In this case, the default script is "index.php".
# 	# 	fastcgi_index index.php;

# 	# 	# The "include" directive is used to include a separate file that contains additional configuration directives.
# 	# 	# The "fastcgi_params" file typically contains parameters that are passed to the FastCGI server.
# 	# 	include fastcgi_params;

# 	# 	# The "fastcgi_param" directive is used to specify additional parameters that should be passed to the FastCGI server.
# 	# 	# In this case, the "SCRIPT_FILENAME" and "SCRIPT_NAME" parameters are specified, which contain the full file path and name of the requested PHP file, respectively.
# 	# 	fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
# 	# 	fastcgi_param SCRIPT_NAME $fastcgi_script_name;
# 	# }
# }
